---
name: Release

on:
  workflow_dispatch:

concurrency: 
  group: release
  cancel-in-progress: true

permissions: write-all

jobs:
  preprelease:
    name: Prepare Release
    runs-on: ubuntu-latest
    permissions: write-all
    outputs:
      next_version: ${{ steps.get_next_version.outputs.semver }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Get Current Version
        id: get_current_version
        run: |
          # Get the current version from Cargo.toml
          current_version=$(grep '^version' Cargo.toml | head -1 | awk '{print $3}' | tr -d '"')
          echo "Current version is: ${current_version}"
          echo "current-version=${current_version}" >> $GITHUB_OUTPUT

      - uses: cachix/install-nix-action@v24
        with:
          github_access_token: ${{ github.token }}

      - name: run preliminary checks and tests
        run: |
          nix flake show
          nix develop --command cargo test

      - name: Get next version
        id: get_next_version
        uses: ck3mp3r/semver-version-action@main
        with:
          current-version: ${{ steps.get_current_version.outputs.current-version }}

      - name: Create release branch
        run: |
          git config --global user.name "Christian Kemper"
          git config --global user.email "christian.kemper@me.com"

          git checkout -b release/v${{ steps.get_next_version.outputs.semver }}
          git push --force --set-upstream origin release/v${{ steps.get_next_version.outputs.semver }}

      - name: Update Cargo.toml if required.
        run: |
          current_version=${{ steps.get_current_version.outputs.current-version }}
          if [ "${current_version}" != "${{ steps.get_next_version.outputs.semver }}" ]; then
            new_version=${{ steps.get_next_version.outputs.semver }}
            sed -i "s/^version = \".*\"/version = \"${new_version}\"/" Cargo.toml
          fi
          nix develop --command cargo update -p rmx
          git add Cargo.toml Cargo.lock
          git commit -m "Bump version in Cargo.toml to ${new_version}"
          git push

  build:
    name: Build
    uses: ./.github/workflows/build.yaml
    with:
      runs-on: ${{ matrix.runner }}
      branch: release/v${{ needs.preprelease.outputs.next_version }}
      binary: rmx
      version: ${{ needs.preprelease.outputs.next_version }}
      url_prefix: https://github.com/ck3mp3r/rmx-cli/releases/download
      target: ${{ matrix.target }}
      git_user: Christian Kemper
      git_user_email: christian.kemper@me.com
    needs: 
      - preprelease
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: linux-amd64
            runner: ubuntu-latest
            target: x86_64-linux
          - name: linux-arm64
            runner: ubuntu-latest
            target: aarch64-linux
          - name: macos-amd64
            runner: macos-latest
            target: x86_64-darwin
          - name: macos-arm64
            runner: macos-latest
            target: aarch64-darwin

  release:
    needs: 
      - preprelease
      - build
    permissions: write-all
    runs-on: ubuntu-latest
    steps:

      # Log in to gh using the GitHub token
      - name: Log in to gh
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Merge to main and tag release
        run: |
          new_version=${{ needs.preprelease.outputs.next_version }}

          git config user.name "Christian Kemper"
          git config user.email "christian.kemper@me.com"

          git fetch --all
          git merge origin/release/v${new_version} --squash --no-edit
          git commit -m "Releasing v${new_version}" 
          git push origin main

          git tag "v${new_version}"
          git push origin "v${new_version}"

      # Create release
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ github.token }}
          name: Prerelease v${{ needs.preprelease.outputs.next_version }}
          tag_name: v${{ needs.preprelease.outputs.next_version }}
          prerelease: true

  upload:
    name: Upload
    needs: 
      - preprelease
      - build
      - release
    strategy:
      matrix:
        target: 
          - x86_64-linux
          - aarch64-linux
          - x86_64-darwin
          - aarch64-darwin
    uses: ./.github/workflows/upload.yaml
    with:
      branch: release/v${{ needs.preprelease.outputs.next_version }}
      binary: rmx
      version: ${{ needs.preprelease.outputs.next_version }}
      target: ${{ matrix.target }}
