---
name: merge to main

on:
  push:
    paths:
      - src/**
      - .github/workflows/main.yaml
      - .github/workflows/release.yaml
    branches:
      - main

jobs:
  bump:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - name: Test Binary
        run: |
          cargo test

      - name: Set up Git
        run: |
          git config --global user.name "Christian Kemper"
          git config --global user.email "christian.kemper@me.com"

      - name: Bump Version
        run: |
          # Get the current version from Cargo.toml
          current_version=$(grep '^version' Cargo.toml | head -1 | awk '{print $3}' | tr -d '"')

          # Fetch latest tag prefixed with 'v'
          latest_tag=$(git describe --tags $(git rev-list --tags --max-count=1))

          # Strip the 'v' prefix from the tag to get the semantic version
          latest_semver=${latest_tag#v}

          # Extract major, minor, and patch versions
          major_version_current=$(echo $current_version | cut -d'.' -f1)
          minor_version_current=$(echo $current_version | cut -d'.' -f2)
          patch_version_current=$(echo $current_version | cut -d'.' -f3)

          major_version_latest=$(echo $latest_semver | cut -d'.' -f1)
          minor_version_latest=$(echo $latest_semver | cut -d'.' -f2)
          patch_version_latest=$(echo $latest_semver | cut -d'.' -f3)

          # If major or minor versions have changed, tag with the version from the input
          if [[ "$major_version_current" != "$major_version_latest" || "$minor_version_current" != "$minor_version_latest" ]]; then
              echo "Major or minor version have changed. Tagging with version from input: v$current_version"
              git tag "v$current_version"
              git push origin "v$current_version"
          # If major and minor versions have not changed, bump the patch version and tag
          elif [[ "$major_version_current" == "$major_version_latest" && "$minor_version_current" == "$minor_version_latest" ]]; then
              new_patch_version=$((patch_version_latest+1))
              new_version="$major_version_current.$minor_version_current.$new_patch_version"
              echo "Tagging with new version: v$new_version"

              sed -i "s/^version = \".*\"/version = \"${new_version}\"/" Cargo.toml
              git commit -m "Bump version in Cargo.toml to ${new_version}"
              git push

              git tag "v$new_version"
              git push origin "v$new_version"

          fi

      - name: Update develop branch with version change
        run: |
          git checkout develop
          git merge main
          git push
